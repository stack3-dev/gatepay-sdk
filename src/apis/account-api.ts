/* tslint:disable */
/* eslint-disable */
/**
 * Gatepay API
 * API documentation for Gatepay
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAccountBalance200Response,
  GetAccountStats200Response,
  GetAccountToken200Response,
  GetAccountTransactions200Response,
  PostAccountTopupLinks201Response,
  PostAccountTopupLinksRequest,
} from '../models/index';
import {
    GetAccountBalance200ResponseFromJSON,
    GetAccountBalance200ResponseToJSON,
    GetAccountStats200ResponseFromJSON,
    GetAccountStats200ResponseToJSON,
    GetAccountToken200ResponseFromJSON,
    GetAccountToken200ResponseToJSON,
    GetAccountTransactions200ResponseFromJSON,
    GetAccountTransactions200ResponseToJSON,
    PostAccountTopupLinks201ResponseFromJSON,
    PostAccountTopupLinks201ResponseToJSON,
    PostAccountTopupLinksRequestFromJSON,
    PostAccountTopupLinksRequestToJSON,
} from '../models/index';

export interface GetAccountTransactionsRequest {
    page?: number;
    limit?: number;
}

export interface PostAccountTopupLinksOperationRequest {
    postAccountTopupLinksRequest?: PostAccountTopupLinksRequest;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Get user\'s account balance
     * Get Balance
     */
    async getAccountBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountBalance200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/account/balance`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountBalance200ResponseFromJSON(jsonValue));
    }

    /**
     * Get user\'s account balance
     * Get Balance
     */
    async getAccountBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountBalance200Response> {
        const response = await this.getAccountBalanceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get statistics for the authenticated user\'s account
     * Get Account Stats
     */
    async getAccountStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountStats200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/account/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountStats200ResponseFromJSON(jsonValue));
    }

    /**
     * Get statistics for the authenticated user\'s account
     * Get Account Stats
     */
    async getAccountStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountStats200Response> {
        const response = await this.getAccountStatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the API token for the authenticated admin (creates one if not present)
     * Get Token
     */
    async getAccountTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/account/token`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the API token for the authenticated admin (creates one if not present)
     * Get Token
     */
    async getAccountToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountToken200Response> {
        const response = await this.getAccountTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get user\'s unified transaction history including topups and payments
     * Get Transactions
     */
    async getAccountTransactionsRaw(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountTransactions200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/account/transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountTransactions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get user\'s unified transaction history including topups and payments
     * Get Transactions
     */
    async getAccountTransactions(requestParameters: GetAccountTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountTransactions200Response> {
        const response = await this.getAccountTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new API token for the user (admin only)
     * Create Token
     */
    async postAccountTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/account/token`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new API token for the user (admin only)
     * Create Token
     */
    async postAccountToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountToken200Response> {
        const response = await this.postAccountTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new topup link
     * Create Topup Link
     */
    async postAccountTopupLinksRaw(requestParameters: PostAccountTopupLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAccountTopupLinks201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/account/topup-links`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAccountTopupLinksRequestToJSON(requestParameters['postAccountTopupLinksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAccountTopupLinks201ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new topup link
     * Create Topup Link
     */
    async postAccountTopupLinks(requestParameters: PostAccountTopupLinksOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAccountTopupLinks201Response> {
        const response = await this.postAccountTopupLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
