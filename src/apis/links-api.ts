/* tslint:disable */
/* eslint-disable */
/**
 * Gatepay API
 * API documentation for Gatepay
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteLinksByUuid200Response,
  GetLinks200Response,
  GetLinksByLinkUuidPayments200Response,
  GetLinksByLinkUuidPayments200ResponsePaymentsInner,
  GetLinksByLinkUuidPaymentsByPaymentUuidActionLogs200Response,
  GetLinksByLinkUuidResourcesActive200Response,
  GetLinksByLinkUuidStats200Response,
  GetLinksByLinkUuidTollsActive200Response,
  PostLinks201Response,
  PostLinksByLinkUuidActions201Response,
  PostLinksByLinkUuidActionsRequest,
  PostLinksByLinkUuidResourcesRequest,
  PostLinksByLinkUuidTollsRequest,
  PostLinksRequest,
  PutLinksByUuidRequest,
} from '../models/index';
import {
    DeleteLinksByUuid200ResponseFromJSON,
    DeleteLinksByUuid200ResponseToJSON,
    GetLinks200ResponseFromJSON,
    GetLinks200ResponseToJSON,
    GetLinksByLinkUuidPayments200ResponseFromJSON,
    GetLinksByLinkUuidPayments200ResponseToJSON,
    GetLinksByLinkUuidPayments200ResponsePaymentsInnerFromJSON,
    GetLinksByLinkUuidPayments200ResponsePaymentsInnerToJSON,
    GetLinksByLinkUuidPaymentsByPaymentUuidActionLogs200ResponseFromJSON,
    GetLinksByLinkUuidPaymentsByPaymentUuidActionLogs200ResponseToJSON,
    GetLinksByLinkUuidResourcesActive200ResponseFromJSON,
    GetLinksByLinkUuidResourcesActive200ResponseToJSON,
    GetLinksByLinkUuidStats200ResponseFromJSON,
    GetLinksByLinkUuidStats200ResponseToJSON,
    GetLinksByLinkUuidTollsActive200ResponseFromJSON,
    GetLinksByLinkUuidTollsActive200ResponseToJSON,
    PostLinks201ResponseFromJSON,
    PostLinks201ResponseToJSON,
    PostLinksByLinkUuidActions201ResponseFromJSON,
    PostLinksByLinkUuidActions201ResponseToJSON,
    PostLinksByLinkUuidActionsRequestFromJSON,
    PostLinksByLinkUuidActionsRequestToJSON,
    PostLinksByLinkUuidResourcesRequestFromJSON,
    PostLinksByLinkUuidResourcesRequestToJSON,
    PostLinksByLinkUuidTollsRequestFromJSON,
    PostLinksByLinkUuidTollsRequestToJSON,
    PostLinksRequestFromJSON,
    PostLinksRequestToJSON,
    PutLinksByUuidRequestFromJSON,
    PutLinksByUuidRequestToJSON,
} from '../models/index';

export interface DeleteLinksByLinkUuidActionsByActionUuidRequest {
    linkUuid: string;
    actionUuid: string;
}

export interface DeleteLinksByLinkUuidResourcesActiveRequest {
    linkUuid: string;
}

export interface DeleteLinksByLinkUuidTollsActiveRequest {
    linkUuid: string;
}

export interface DeleteLinksByUuidRequest {
    uuid: string;
}

export interface GetLinksRequest {
    limit?: number;
    page?: number;
}

export interface GetLinksByLinkUuidPaymentsRequest {
    linkUuid: string;
    page?: number;
    limit?: number;
}

export interface GetLinksByLinkUuidPaymentsByPaymentUuidRequest {
    linkUuid: string;
    paymentUuid: string;
}

export interface GetLinksByLinkUuidPaymentsByPaymentUuidActionLogsRequest {
    linkUuid: string;
    paymentUuid: string;
}

export interface GetLinksByLinkUuidResourcesActiveRequest {
    linkUuid: string;
}

export interface GetLinksByLinkUuidStatsRequest {
    linkUuid: string;
}

export interface GetLinksByLinkUuidTollsActiveRequest {
    linkUuid: string;
}

export interface GetLinksByUuidOrAliasRequest {
    uuidOrAlias: string;
}

export interface PostLinksOperationRequest {
    postLinksRequest?: PostLinksRequest;
}

export interface PostLinksByLinkUuidActionsOperationRequest {
    linkUuid: string;
    postLinksByLinkUuidActionsRequest?: PostLinksByLinkUuidActionsRequest;
}

export interface PostLinksByLinkUuidResourcesOperationRequest {
    linkUuid: string;
    postLinksByLinkUuidResourcesRequest?: PostLinksByLinkUuidResourcesRequest;
}

export interface PostLinksByLinkUuidTollsOperationRequest {
    linkUuid: string;
    postLinksByLinkUuidTollsRequest?: PostLinksByLinkUuidTollsRequest;
}

export interface PutLinksByLinkUuidActionsByActionUuidRequest {
    linkUuid: string;
    actionUuid: string;
    postLinksByLinkUuidActionsRequest?: PostLinksByLinkUuidActionsRequest;
}

export interface PutLinksByUuidOperationRequest {
    uuid: string;
    putLinksByUuidRequest?: PutLinksByUuidRequest;
}

/**
 * 
 */
export class LinksApi extends runtime.BaseAPI {

    /**
     * Delete an action for the link
     * Delete Action
     */
    async deleteLinksByLinkUuidActionsByActionUuidRaw(requestParameters: DeleteLinksByLinkUuidActionsByActionUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling deleteLinksByLinkUuidActionsByActionUuid().'
            );
        }

        if (requestParameters['actionUuid'] == null) {
            throw new runtime.RequiredError(
                'actionUuid',
                'Required parameter "actionUuid" was null or undefined when calling deleteLinksByLinkUuidActionsByActionUuid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/actions/{actionUuid}`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));
        urlPath = urlPath.replace(`{${"actionUuid"}}`, encodeURIComponent(String(requestParameters['actionUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an action for the link
     * Delete Action
     */
    async deleteLinksByLinkUuidActionsByActionUuid(requestParameters: DeleteLinksByLinkUuidActionsByActionUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLinksByLinkUuidActionsByActionUuidRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Resource
     */
    async deleteLinksByLinkUuidResourcesActiveRaw(requestParameters: DeleteLinksByLinkUuidResourcesActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling deleteLinksByLinkUuidResourcesActive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/resources/active`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Resource
     */
    async deleteLinksByLinkUuidResourcesActive(requestParameters: DeleteLinksByLinkUuidResourcesActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLinksByLinkUuidResourcesActiveRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a toll for a link
     * Delete Toll
     */
    async deleteLinksByLinkUuidTollsActiveRaw(requestParameters: DeleteLinksByLinkUuidTollsActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling deleteLinksByLinkUuidTollsActive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/tolls/active`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a toll for a link
     * Delete Toll
     */
    async deleteLinksByLinkUuidTollsActive(requestParameters: DeleteLinksByLinkUuidTollsActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLinksByLinkUuidTollsActiveRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a link by UUID
     * Delete Link
     */
    async deleteLinksByUuidRaw(requestParameters: DeleteLinksByUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteLinksByUuid200Response>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling deleteLinksByUuid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{uuid}`;
        urlPath = urlPath.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteLinksByUuid200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a link by UUID
     * Delete Link
     */
    async deleteLinksByUuid(requestParameters: DeleteLinksByUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteLinksByUuid200Response> {
        const response = await this.deleteLinksByUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all user links (paginated)
     * Get Links
     */
    async getLinksRaw(requestParameters: GetLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLinks200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLinks200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all user links (paginated)
     * Get Links
     */
    async getLinks(requestParameters: GetLinksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLinks200Response> {
        const response = await this.getLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all payments for a link
     * Get Payments
     */
    async getLinksByLinkUuidPaymentsRaw(requestParameters: GetLinksByLinkUuidPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLinksByLinkUuidPayments200Response>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling getLinksByLinkUuidPayments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/payments`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLinksByLinkUuidPayments200ResponseFromJSON(jsonValue));
    }

    /**
     * List all payments for a link
     * Get Payments
     */
    async getLinksByLinkUuidPayments(requestParameters: GetLinksByLinkUuidPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLinksByLinkUuidPayments200Response> {
        const response = await this.getLinksByLinkUuidPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a payment for a link
     * Get Payment
     */
    async getLinksByLinkUuidPaymentsByPaymentUuidRaw(requestParameters: GetLinksByLinkUuidPaymentsByPaymentUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLinksByLinkUuidPayments200ResponsePaymentsInner>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling getLinksByLinkUuidPaymentsByPaymentUuid().'
            );
        }

        if (requestParameters['paymentUuid'] == null) {
            throw new runtime.RequiredError(
                'paymentUuid',
                'Required parameter "paymentUuid" was null or undefined when calling getLinksByLinkUuidPaymentsByPaymentUuid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/payments/{paymentUuid}`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));
        urlPath = urlPath.replace(`{${"paymentUuid"}}`, encodeURIComponent(String(requestParameters['paymentUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLinksByLinkUuidPayments200ResponsePaymentsInnerFromJSON(jsonValue));
    }

    /**
     * Get a payment for a link
     * Get Payment
     */
    async getLinksByLinkUuidPaymentsByPaymentUuid(requestParameters: GetLinksByLinkUuidPaymentsByPaymentUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLinksByLinkUuidPayments200ResponsePaymentsInner> {
        const response = await this.getLinksByLinkUuidPaymentsByPaymentUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get action logs for a payment
     * Get Action Logs
     */
    async getLinksByLinkUuidPaymentsByPaymentUuidActionLogsRaw(requestParameters: GetLinksByLinkUuidPaymentsByPaymentUuidActionLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLinksByLinkUuidPaymentsByPaymentUuidActionLogs200Response>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling getLinksByLinkUuidPaymentsByPaymentUuidActionLogs().'
            );
        }

        if (requestParameters['paymentUuid'] == null) {
            throw new runtime.RequiredError(
                'paymentUuid',
                'Required parameter "paymentUuid" was null or undefined when calling getLinksByLinkUuidPaymentsByPaymentUuidActionLogs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/payments/{paymentUuid}/action-logs`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));
        urlPath = urlPath.replace(`{${"paymentUuid"}}`, encodeURIComponent(String(requestParameters['paymentUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLinksByLinkUuidPaymentsByPaymentUuidActionLogs200ResponseFromJSON(jsonValue));
    }

    /**
     * Get action logs for a payment
     * Get Action Logs
     */
    async getLinksByLinkUuidPaymentsByPaymentUuidActionLogs(requestParameters: GetLinksByLinkUuidPaymentsByPaymentUuidActionLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLinksByLinkUuidPaymentsByPaymentUuidActionLogs200Response> {
        const response = await this.getLinksByLinkUuidPaymentsByPaymentUuidActionLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Resource
     */
    async getLinksByLinkUuidResourcesActiveRaw(requestParameters: GetLinksByLinkUuidResourcesActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLinksByLinkUuidResourcesActive200Response>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling getLinksByLinkUuidResourcesActive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/resources/active`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLinksByLinkUuidResourcesActive200ResponseFromJSON(jsonValue));
    }

    /**
     * Get Resource
     */
    async getLinksByLinkUuidResourcesActive(requestParameters: GetLinksByLinkUuidResourcesActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLinksByLinkUuidResourcesActive200Response> {
        const response = await this.getLinksByLinkUuidResourcesActiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get statistics for a specific link
     * Get Stats
     */
    async getLinksByLinkUuidStatsRaw(requestParameters: GetLinksByLinkUuidStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLinksByLinkUuidStats200Response>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling getLinksByLinkUuidStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/stats`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLinksByLinkUuidStats200ResponseFromJSON(jsonValue));
    }

    /**
     * Get statistics for a specific link
     * Get Stats
     */
    async getLinksByLinkUuidStats(requestParameters: GetLinksByLinkUuidStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLinksByLinkUuidStats200Response> {
        const response = await this.getLinksByLinkUuidStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the active toll for a link
     * Get Toll
     */
    async getLinksByLinkUuidTollsActiveRaw(requestParameters: GetLinksByLinkUuidTollsActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLinksByLinkUuidTollsActive200Response>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling getLinksByLinkUuidTollsActive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/tolls/active`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLinksByLinkUuidTollsActive200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the active toll for a link
     * Get Toll
     */
    async getLinksByLinkUuidTollsActive(requestParameters: GetLinksByLinkUuidTollsActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLinksByLinkUuidTollsActive200Response> {
        const response = await this.getLinksByLinkUuidTollsActiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single link by UUID or Alias
     * Get Link
     */
    async getLinksByUuidOrAliasRaw(requestParameters: GetLinksByUuidOrAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostLinks201Response>> {
        if (requestParameters['uuidOrAlias'] == null) {
            throw new runtime.RequiredError(
                'uuidOrAlias',
                'Required parameter "uuidOrAlias" was null or undefined when calling getLinksByUuidOrAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{uuidOrAlias}`;
        urlPath = urlPath.replace(`{${"uuidOrAlias"}}`, encodeURIComponent(String(requestParameters['uuidOrAlias'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostLinks201ResponseFromJSON(jsonValue));
    }

    /**
     * Get a single link by UUID or Alias
     * Get Link
     */
    async getLinksByUuidOrAlias(requestParameters: GetLinksByUuidOrAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostLinks201Response> {
        const response = await this.getLinksByUuidOrAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new link
     * Create Link
     */
    async postLinksRaw(requestParameters: PostLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostLinks201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLinksRequestToJSON(requestParameters['postLinksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostLinks201ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new link
     * Create Link
     */
    async postLinks(requestParameters: PostLinksOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostLinks201Response> {
        const response = await this.postLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new action for the link
     * Create Action
     */
    async postLinksByLinkUuidActionsRaw(requestParameters: PostLinksByLinkUuidActionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostLinksByLinkUuidActions201Response>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling postLinksByLinkUuidActions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/actions`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLinksByLinkUuidActionsRequestToJSON(requestParameters['postLinksByLinkUuidActionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostLinksByLinkUuidActions201ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new action for the link
     * Create Action
     */
    async postLinksByLinkUuidActions(requestParameters: PostLinksByLinkUuidActionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostLinksByLinkUuidActions201Response> {
        const response = await this.postLinksByLinkUuidActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Resource
     */
    async postLinksByLinkUuidResourcesRaw(requestParameters: PostLinksByLinkUuidResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLinksByLinkUuidResourcesActive200Response>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling postLinksByLinkUuidResources().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/resources`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLinksByLinkUuidResourcesRequestToJSON(requestParameters['postLinksByLinkUuidResourcesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLinksByLinkUuidResourcesActive200ResponseFromJSON(jsonValue));
    }

    /**
     * Create Resource
     */
    async postLinksByLinkUuidResources(requestParameters: PostLinksByLinkUuidResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLinksByLinkUuidResourcesActive200Response> {
        const response = await this.postLinksByLinkUuidResourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new toll for a link
     * Create Toll
     */
    async postLinksByLinkUuidTollsRaw(requestParameters: PostLinksByLinkUuidTollsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLinksByLinkUuidTollsActive200Response>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling postLinksByLinkUuidTolls().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/tolls`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLinksByLinkUuidTollsRequestToJSON(requestParameters['postLinksByLinkUuidTollsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLinksByLinkUuidTollsActive200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new toll for a link
     * Create Toll
     */
    async postLinksByLinkUuidTolls(requestParameters: PostLinksByLinkUuidTollsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLinksByLinkUuidTollsActive200Response> {
        const response = await this.postLinksByLinkUuidTollsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an action for the link
     * Update Action
     */
    async putLinksByLinkUuidActionsByActionUuidRaw(requestParameters: PutLinksByLinkUuidActionsByActionUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostLinksByLinkUuidActions201Response>> {
        if (requestParameters['linkUuid'] == null) {
            throw new runtime.RequiredError(
                'linkUuid',
                'Required parameter "linkUuid" was null or undefined when calling putLinksByLinkUuidActionsByActionUuid().'
            );
        }

        if (requestParameters['actionUuid'] == null) {
            throw new runtime.RequiredError(
                'actionUuid',
                'Required parameter "actionUuid" was null or undefined when calling putLinksByLinkUuidActionsByActionUuid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{linkUuid}/actions/{actionUuid}`;
        urlPath = urlPath.replace(`{${"linkUuid"}}`, encodeURIComponent(String(requestParameters['linkUuid'])));
        urlPath = urlPath.replace(`{${"actionUuid"}}`, encodeURIComponent(String(requestParameters['actionUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostLinksByLinkUuidActionsRequestToJSON(requestParameters['postLinksByLinkUuidActionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostLinksByLinkUuidActions201ResponseFromJSON(jsonValue));
    }

    /**
     * Update an action for the link
     * Update Action
     */
    async putLinksByLinkUuidActionsByActionUuid(requestParameters: PutLinksByLinkUuidActionsByActionUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostLinksByLinkUuidActions201Response> {
        const response = await this.putLinksByLinkUuidActionsByActionUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a link by UUID
     * Update Link
     */
    async putLinksByUuidRaw(requestParameters: PutLinksByUuidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostLinks201Response>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling putLinksByUuid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{uuid}`;
        urlPath = urlPath.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutLinksByUuidRequestToJSON(requestParameters['putLinksByUuidRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostLinks201ResponseFromJSON(jsonValue));
    }

    /**
     * Update a link by UUID
     * Update Link
     */
    async putLinksByUuid(requestParameters: PutLinksByUuidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostLinks201Response> {
        const response = await this.putLinksByUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
