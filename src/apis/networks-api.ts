/* tslint:disable */
/* eslint-disable */
/**
 * Gatepay API
 * API documentation for Gatepay
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetNetworks200ResponseInner,
  GetNetworks200ResponseInnerAssetsInner,
} from '../models/index';
import {
    GetNetworks200ResponseInnerFromJSON,
    GetNetworks200ResponseInnerToJSON,
    GetNetworks200ResponseInnerAssetsInnerFromJSON,
    GetNetworks200ResponseInnerAssetsInnerToJSON,
} from '../models/index';

export interface GetNetworksByNameRequest {
    name: string;
}

export interface GetNetworksByNameAssetsRequest {
    name: string;
}

/**
 * 
 */
export class NetworksApi extends runtime.BaseAPI {

    /**
     * List all networks with their assets
     * Get Networks
     */
    async getNetworksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetNetworks200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/networks/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetNetworks200ResponseInnerFromJSON));
    }

    /**
     * List all networks with their assets
     * Get Networks
     */
    async getNetworks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetNetworks200ResponseInner>> {
        const response = await this.getNetworksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a single network by name
     * Get Network
     */
    async getNetworksByNameRaw(requestParameters: GetNetworksByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNetworks200ResponseInner>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getNetworksByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/networks/{name}`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNetworks200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Get a single network by name
     * Get Network
     */
    async getNetworksByName(requestParameters: GetNetworksByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNetworks200ResponseInner> {
        const response = await this.getNetworksByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all assets for a network
     * Get Assets
     */
    async getNetworksByNameAssetsRaw(requestParameters: GetNetworksByNameAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetNetworks200ResponseInnerAssetsInner>>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getNetworksByNameAssets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/networks/{name}/assets`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetNetworks200ResponseInnerAssetsInnerFromJSON));
    }

    /**
     * List all assets for a network
     * Get Assets
     */
    async getNetworksByNameAssets(requestParameters: GetNetworksByNameAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetNetworks200ResponseInnerAssetsInner>> {
        const response = await this.getNetworksByNameAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
